rename(., year_most_recent = year) %>%
dplyr::select(., -zeit) %>%
arrange(., id_landkreis)
length(unique(dd_pop$id_landkreis))
# # Population data for each county.
# dd_org_pop <- desstatiscleanr("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
#   rename(., id_landkreis = na_na,
#          name_landkreis = na_na2) %>%
#   rename_all(funs(str_remove(., "stichtag_31.12."))) %>%
#   pivot_longer(., cols = -c(id_landkreis, name_landkreis), names_to = "year", values_to = "population") %>%
#   filter(., !is.na(population)) %>%
#   filter(., !str_detect(name_landkreis, "\\(b")) %>%
#   group_by(., name_landkreis) %>%
#   filter(., year == max(year)) %>%
#   ungroup() %>%
#   rename(., year_most_recent = year) %>%
#   separate(., name_landkreis, into = c("name", "type"), sep = "\\. ", remove = TRUE) %>%
#   mutate(., type = str_remove(type, "\\((.*)$"))
#
# str(dd_org_pop)
write_csv(dd_pop, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Demographics_Germany_TMM.csv")
str(dd_pop)
sessionInfo()
rm(list = ls())
library(tidyverse)
library(janitor)
library(rjson)
library(wiesbaden)
library(lubridate)
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
write_csv(dd_case, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Time_series_Germany_TMM.csv")
dd_pop <- read_csv2("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
janitor::clean_names(.) %>%
dplyr::select(., -c(statistik_code, statistik_label, zeit_code, zeit_label, x1_merkmal_code, x1_merkmal_label)) %>%
rename(., id_landkreis = x1_auspraegung_code,
name_landkreis = x1_auspraegung_label,
population = bevstd_bevoelkerungsstand_anzahl) %>%
mutate(., year = year(dmy(as.character(zeit)))) %>%
separate(., name_landkreis, into = c("name", "type"), sep = "\\, ", remove = TRUE) %>%
filter(., !is.na(population)) %>%
# filter(., !str_detect(type, "\\(b")) %>%
group_by(id_landkreis) %>%
filter(., population != "-") %>%
filter(., year == max(year) & population != "-") %>%
ungroup() %>%
rename(., year_most_recent = year) %>%
dplyr::select(., -zeit) %>%
arrange(., id_landkreis)
length(unique(dd_pop$id_landkreis))
# # Population data for each county.
# dd_org_pop <- desstatiscleanr("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
#   rename(., id_landkreis = na_na,
#          name_landkreis = na_na2) %>%
#   rename_all(funs(str_remove(., "stichtag_31.12."))) %>%
#   pivot_longer(., cols = -c(id_landkreis, name_landkreis), names_to = "year", values_to = "population") %>%
#   filter(., !is.na(population)) %>%
#   filter(., !str_detect(name_landkreis, "\\(b")) %>%
#   group_by(., name_landkreis) %>%
#   filter(., year == max(year)) %>%
#   ungroup() %>%
#   rename(., year_most_recent = year) %>%
#   separate(., name_landkreis, into = c("name", "type"), sep = "\\. ", remove = TRUE) %>%
#   mutate(., type = str_remove(type, "\\((.*)$"))
#
# str(dd_org_pop)
write_csv(dd_pop, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Demographics_Germany_TMM.csv")
str(dd_pop)
sessionInfo()
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(forcats)
library(RcppRoll)
library(zoo)
library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
# Quick graphical check.
p_01 <- ggplotly(dd %>%
filter(., country_region == "Germany") %>%
ggplot(aes(x = date, y = cases, colour = status)) +
geom_line() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_colour_manual(values = c("#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
theme_minimal() +
theme(legend.title = element_blank())); p_01
# Export to .csv file.
write_csv(dd, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
# Include demographic data
dd_pop <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Supplementary information/WorldPop_2018.csv") %>%
filter(., region != "Aggregates")
dd_plus <- dd %>%
group_by(., date, country_region, status) %>%
summarise(., cases_all = sum(cases)) %>%
ungroup(.) %>%
arrange(., country_region, status, date) %>%
left_join(., dd_pop, by = c("country_region" = "country")) %>%  # Check that all countries are matched!!!
group_by(., status, country_region) %>%
mutate(., cases_all_diff = cases_all - dplyr::lag(x = cases_all, n = 1, order_by = c(date))) %>%
ungroup(.) %>%
group_by(., country_region) %>%
mutate(., cases_all_rel_ck = cases_all / population_total *100000) %>%
mutate(., cases_all_diff_rel_ck = cases_all_rel_ck - lag(cases_all_rel_ck)) %>%
ungroup(.) %>%
group_by(., status, country_region) %>%
mutate(., cases_all_rollmean = zoo::rollmean(cases_all, k = 7, fill = NA, align = "right")) %>%
mutate(., cases_all_diff_rollmean = zoo::rollmean(cases_all_diff, k = 7, fill = NA, align = "right")) %>%
ungroup(.)
# dd_ger <- filter(dd, country_region == "Germany")
p_02 <- dd_plus %>%
ggplot(data = .,
aes(x = region,
y = cases_all,
fill = region)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_02
p_03 <- dd_plus %>%
ggplot(data = .,
aes(x = income,
y = cases_all,
fill = income)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_03
# Export to .csv file.
write_csv(dd_plus, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_plus.csv")
param_crit <- 50
dd_cut_crit <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= param_crit) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
write_csv(dd_cut_crit, paste("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_cut_crit_", param_crit, ".csv", sep = ""))
sessionInfo()
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(forcats)
library(RcppRoll)
library(zoo)
library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
# Quick graphical check.
p_01 <- ggplotly(dd %>%
filter(., country_region == "Germany") %>%
ggplot(aes(x = date, y = cases, colour = status)) +
geom_line() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_colour_manual(values = c("#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
theme_minimal() +
theme(legend.title = element_blank())); p_01
# Export to .csv file.
write_csv(dd, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
# Include demographic data
dd_pop <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Supplementary information/WorldPop_2018.csv") %>%
filter(., region != "Aggregates")
dd_plus <- dd %>%
group_by(., date, country_region, status) %>%
summarise(., cases_all = sum(cases)) %>%
ungroup(.) %>%
arrange(., country_region, status, date) %>%
left_join(., dd_pop, by = c("country_region" = "country")) %>%  # Check that all countries are matched!!!
group_by(., status, country_region) %>%
mutate(., cases_all_diff = cases_all - dplyr::lag(x = cases_all, n = 1, order_by = c(date))) %>%
ungroup(.) %>%
group_by(., country_region) %>%
mutate(., cases_all_rel_ck = cases_all / population_total *100000) %>%
mutate(., cases_all_diff_rel_ck = cases_all_rel_ck - lag(cases_all_rel_ck)) %>%
ungroup(.) %>%
group_by(., status, country_region) %>%
mutate(., cases_all_rollmean = zoo::rollmean(cases_all, k = 7, fill = NA, align = "right")) %>%
mutate(., cases_all_diff_rollmean = zoo::rollmean(cases_all_diff, k = 7, fill = NA, align = "right")) %>%
ungroup(.)
# dd_ger <- filter(dd, country_region == "Germany")
p_02 <- dd_plus %>%
ggplot(data = .,
aes(x = region,
y = cases_all,
fill = region)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_02
p_03 <- dd_plus %>%
ggplot(data = .,
aes(x = income,
y = cases_all,
fill = income)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_03
# Export to .csv file.
write_csv(dd_plus, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_plus.csv")
param_crit <- 50
dd_cut_crit <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= param_crit) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
write_csv(dd_cut_crit, paste("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_cut_crit_", param_crit, ".csv", sep = ""))
sessionInfo()
rm(list = ls())
library(tidyverse)
library(janitor)
library(rjson)
library(wiesbaden)
library(lubridate)
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
write_csv(dd_case, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Time_series_Germany_TMM.csv")
dd_pop <- read_csv2("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
janitor::clean_names(.) %>%
dplyr::select(., -c(statistik_code, statistik_label, zeit_code, zeit_label, x1_merkmal_code, x1_merkmal_label)) %>%
rename(., id_landkreis = x1_auspraegung_code,
name_landkreis = x1_auspraegung_label,
population = bevstd_bevoelkerungsstand_anzahl) %>%
mutate(., year = year(dmy(as.character(zeit)))) %>%
separate(., name_landkreis, into = c("name", "type"), sep = "\\, ", remove = TRUE) %>%
filter(., !is.na(population)) %>%
# filter(., !str_detect(type, "\\(b")) %>%
group_by(id_landkreis) %>%
filter(., population != "-") %>%
filter(., year == max(year) & population != "-") %>%
ungroup() %>%
rename(., year_most_recent = year) %>%
dplyr::select(., -zeit) %>%
arrange(., id_landkreis)
length(unique(dd_pop$id_landkreis))
# # Population data for each county.
# dd_org_pop <- desstatiscleanr("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
#   rename(., id_landkreis = na_na,
#          name_landkreis = na_na2) %>%
#   rename_all(funs(str_remove(., "stichtag_31.12."))) %>%
#   pivot_longer(., cols = -c(id_landkreis, name_landkreis), names_to = "year", values_to = "population") %>%
#   filter(., !is.na(population)) %>%
#   filter(., !str_detect(name_landkreis, "\\(b")) %>%
#   group_by(., name_landkreis) %>%
#   filter(., year == max(year)) %>%
#   ungroup() %>%
#   rename(., year_most_recent = year) %>%
#   separate(., name_landkreis, into = c("name", "type"), sep = "\\. ", remove = TRUE) %>%
#   mutate(., type = str_remove(type, "\\((.*)$"))
#
# str(dd_org_pop)
write_csv(dd_pop, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Demographics_Germany_TMM.csv")
str(dd_pop)
sessionInfo()
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(forcats)
library(RcppRoll)
library(zoo)
library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
# Quick graphical check.
p_01 <- ggplotly(dd %>%
filter(., country_region == "Germany") %>%
ggplot(aes(x = date, y = cases, colour = status)) +
geom_line() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_colour_manual(values = c("#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
theme_minimal() +
theme(legend.title = element_blank())); p_01
# Export to .csv file.
write_csv(dd, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
# Include demographic data
dd_pop <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Supplementary information/WorldPop_2018.csv") %>%
filter(., region != "Aggregates")
dd_plus <- dd %>%
group_by(., date, country_region, status) %>%
summarise(., cases_all = sum(cases)) %>%
ungroup(.) %>%
arrange(., country_region, status, date) %>%
left_join(., dd_pop, by = c("country_region" = "country")) %>%  # Check that all countries are matched!!!
group_by(., status, country_region) %>%
mutate(., cases_all_diff = cases_all - dplyr::lag(x = cases_all, n = 1, order_by = c(date))) %>%
ungroup(.) %>%
group_by(., country_region) %>%
mutate(., cases_all_rel_ck = cases_all / population_total *100000) %>%
mutate(., cases_all_diff_rel_ck = cases_all_rel_ck - lag(cases_all_rel_ck)) %>%
ungroup(.) %>%
group_by(., status, country_region) %>%
mutate(., cases_all_rollmean = zoo::rollmean(cases_all, k = 7, fill = NA, align = "right")) %>%
mutate(., cases_all_diff_rollmean = zoo::rollmean(cases_all_diff, k = 7, fill = NA, align = "right")) %>%
ungroup(.)
# dd_ger <- filter(dd, country_region == "Germany")
p_02 <- dd_plus %>%
ggplot(data = .,
aes(x = region,
y = cases_all,
fill = region)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_02
p_03 <- dd_plus %>%
ggplot(data = .,
aes(x = income,
y = cases_all,
fill = income)) +
geom_col() +
coord_flip() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_fill_manual(values = c(wes_palette("GrandBudapest1"), wes_palette("BottleRocket2"))) +
theme_minimal() +
# theme(legend.title = element_blank())
theme(legend.position = "none"); p_03
# Export to .csv file.
write_csv(dd_plus, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_plus.csv")
param_crit <- 50
dd_cut_crit <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= param_crit) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
write_csv(dd_cut_crit, paste("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM_cut_crit_", param_crit, ".csv", sep = ""))
sessionInfo()
rm(list = ls())
library(tidyverse)
library(janitor)
library(rjson)
library(wiesbaden)
library(lubridate)
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
write_csv(dd_case, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Time_series_Germany_TMM.csv")
dd_pop <- read_csv2("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
janitor::clean_names(.) %>%
dplyr::select(., -c(statistik_code, statistik_label, zeit_code, zeit_label, x1_merkmal_code, x1_merkmal_label)) %>%
rename(., id_landkreis = x1_auspraegung_code,
name_landkreis = x1_auspraegung_label,
population = bevstd_bevoelkerungsstand_anzahl) %>%
mutate(., year = year(dmy(as.character(zeit)))) %>%
separate(., name_landkreis, into = c("name", "type"), sep = "\\, ", remove = TRUE) %>%
filter(., !is.na(population)) %>%
# filter(., !str_detect(type, "\\(b")) %>%
group_by(id_landkreis) %>%
filter(., population != "-") %>%
filter(., year == max(year) & population != "-") %>%
ungroup() %>%
rename(., year_most_recent = year) %>%
dplyr::select(., -zeit) %>%
arrange(., id_landkreis)
length(unique(dd_pop$id_landkreis))
# # Population data for each county.
# dd_org_pop <- desstatiscleanr("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
#   rename(., id_landkreis = na_na,
#          name_landkreis = na_na2) %>%
#   rename_all(funs(str_remove(., "stichtag_31.12."))) %>%
#   pivot_longer(., cols = -c(id_landkreis, name_landkreis), names_to = "year", values_to = "population") %>%
#   filter(., !is.na(population)) %>%
#   filter(., !str_detect(name_landkreis, "\\(b")) %>%
#   group_by(., name_landkreis) %>%
#   filter(., year == max(year)) %>%
#   ungroup() %>%
#   rename(., year_most_recent = year) %>%
#   separate(., name_landkreis, into = c("name", "type"), sep = "\\. ", remove = TRUE) %>%
#   mutate(., type = str_remove(type, "\\((.*)$"))
#
# str(dd_org_pop)
write_csv(dd_pop, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Demographics_Germany_TMM.csv")
str(dd_pop)
sessionInfo()
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
