library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
rm(list = ls())
library(tidyverse)
library(janitor)
library(rjson)
library(wiesbaden)
library(lubridate)
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(plotly)
dd_cases <- read_csv("https://raw.githubusercontent.com/daenuprobst/covid19-cases-switzerland/master/covid19_cases_switzerland_openzh.csv") %>%
dplyr::select(., -c(CH)) %>%
pivot_longer(., cols = -c(Date), names_to = "canton", values_to = "cases") %>%
clean_names()
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
library(waffle)
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
shiny::runApp('CoViD-19_exploration')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(forcats)
library(RcppRoll)
library(zoo)
library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
# Quick graphical check.
p_01 <- ggplotly(dd %>%
filter(., country_region == "Germany") %>%
ggplot(aes(x = date, y = cases, colour = status)) +
geom_line() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_colour_manual(values = c("#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
theme_minimal() +
theme(legend.title = element_blank())); p_01
# Export to .csv file.
write_csv(dd, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
rm(list = ls())
library(tidyverse)
library(janitor)
library(rjson)
library(wiesbaden)
library(lubridate)
# CoViD-19 data
dd_case <- read_csv("https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv") %>%
clean_names()
write_csv(dd_case, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Time_series_Germany_TMM.csv")
dd_pop <- read_csv2("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
janitor::clean_names(.) %>%
dplyr::select(., -c(statistik_code, statistik_label, zeit_code, zeit_label, x1_merkmal_code, x1_merkmal_label)) %>%
rename(., id_landkreis = x1_auspraegung_code,
name_landkreis = x1_auspraegung_label,
population = bevstd_bevoelkerungsstand_anzahl) %>%
mutate(., year = year(dmy(as.character(zeit)))) %>%
separate(., name_landkreis, into = c("name", "type"), sep = "\\, ", remove = TRUE) %>%
filter(., !is.na(population)) %>%
# filter(., !str_detect(type, "\\(b")) %>%
group_by(id_landkreis) %>%
filter(., population != "-") %>%
filter(., year == max(year) & population != "-") %>%
ungroup() %>%
rename(., year_most_recent = year) %>%
dplyr::select(., -zeit) %>%
arrange(., id_landkreis)
length(unique(dd_pop$id_landkreis))
# # Population data for each county.
# dd_org_pop <- desstatiscleanr("~/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/Demographic data/12411-0015_flat.csv") %>%
#   rename(., id_landkreis = na_na,
#          name_landkreis = na_na2) %>%
#   rename_all(funs(str_remove(., "stichtag_31.12."))) %>%
#   pivot_longer(., cols = -c(id_landkreis, name_landkreis), names_to = "year", values_to = "population") %>%
#   filter(., !is.na(population)) %>%
#   filter(., !str_detect(name_landkreis, "\\(b")) %>%
#   group_by(., name_landkreis) %>%
#   filter(., year == max(year)) %>%
#   ungroup() %>%
#   rename(., year_most_recent = year) %>%
#   separate(., name_landkreis, into = c("name", "type"), sep = "\\. ", remove = TRUE) %>%
#   mutate(., type = str_remove(type, "\\((.*)$"))
#
# str(dd_org_pop)
write_csv(dd_pop, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- Germany/COVID_Demographics_Germany_TMM.csv")
str(dd_pop)
sessionInfo()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
View(dd_case)
# Clear workspace
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(forcats)
library(RcppRoll)
library(zoo)
library(plotly)
library(waffle)
library(htmlwidgets)
library(extrafont)
library(ggtextures)
library(grid)
library(magick)
library(wesanderson)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
## >>>>>>>>>>>>>>>>>>>>>>>
# Load CoViD-19 data from GitHub.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor)
str(dd)
head(dd)
# Quick graphical check.
p_01 <- ggplotly(dd %>%
filter(., country_region == "Germany") %>%
ggplot(aes(x = date, y = cases, colour = status)) +
geom_line() +
labs(title = "CoViD-19 cases for Germany") +
xlab("") +
ylab("") +
scale_colour_manual(values = c("#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
theme_minimal() +
theme(legend.title = element_blank())); p_01
# Export to .csv file.
write_csv(dd, "/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
# Include demographic data
dd_pop <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Supplementary information/WorldPop_2018.csv") %>%
filter(., region != "Aggregates")
filter(dd, country_region == "Sweden")
tail(filter(dd, country_region == "Sweden"))
tail(filter(dd, country_region == "Sweden"), 10)
# Clear workspace.
rm(list = ls())
# Load packages
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(plotly)
library(drc)
library(forcats)
# library(growthmodels)
library(shiny)
library(waffle)
# Load basic data for case numbers.
dd_org_confirmed = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "confirmed")
dd_org_deaths = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "deaths")
dd_org_recovered = read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")) %>%
# select(., -c("Province/State")) %>%
pivot_longer(., cols = -c("Country/Region", "Province/State", "Lat", "Long"), names_to = "Date", values_to = "recovered")
dd <- dd_org_confirmed %>%
left_join(., dd_org_deaths, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
left_join(., dd_org_recovered, by = c("Country/Region", "Province/State", "Date", "Lat", "Long"), copy = FALSE, keep = FALSE) %>%
mutate(active = confirmed - deaths - recovered,
Date = mdy(Date)) %>%
pivot_longer(., cols = c(confirmed, deaths, recovered, active), names_to = "status", values_to = "cases") %>%
clean_names(.) %>%
mutate_if(., is.character, as.factor) %>%
mutate(., country_region = stringr::str_replace_all(country_region,
c("US" = "United States",
"Congo \\(Kinshasa\\)" = "Congo, Dem. Rep.",
"Congo \\(Brazzaville\\)" = "Congo, Rep.",
"Egypt" = "Egypt, Arab Rep.",
"Bahamas" = "Bahamas, The",
"Brunei" = "Brunei Darussalam",
"Czechia" = "Czech Republic",
"Gambia" = "Gambia, The",
"Iran" = "Iran, Islamic Rep.",
"Korea, South" = "Korea, Rep.",
"Kyrgyzstan" = "Kyrgyz Republic",
"Russia" = "Russian Federation",
"Saint Lucia" = "St. Lucia",
"Saint Vincent and the Grenadines" = "St. Vincent and the Grenadines",
"Slovakia" = "Slovak Republic",
"Venezuela" = "Venezuela, RB",
"Syria" = "Syrian Arab Republic",
"Laos" = "Lao PDR",
"Saint Kitts and Nevis" = "St. Kitts and Nevis",
"Burma" = "Myanmar",
"Yemen" = "Yemen, Rep.")))
# dd <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Time series --- global/NEW_COVID_Time_series_TMM.csv")
# Loading demographic from 'The World Bank'.
# dd_pop <- read_csv("/Users/thomasmassie/Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Code/Supplementary information/WorldPop_2018.csv")
dd_pop <- read_csv("https://raw.githubusercontent.com/thomassie/COVID-19/master/R%20Code/Supplementary%20information/WorldPop_2018.csv")
# Process data for analysis
dd_plus <- dd %>%
group_by(., date, country_region, status) %>%
summarise(., cases_all = sum(cases)) %>%
ungroup(.) %>%
arrange(., country_region, status, date) %>%
left_join(., dd_pop, by = c("country_region" = "country")) %>%  # Check that all countries are matched!!!
group_by(., status, country_region) %>%
mutate(., cases_all_diff = cases_all - dplyr::lag(x = cases_all, n = 1, order_by = c(date))) %>%
ungroup(.) %>%
group_by(., country_region) %>%
mutate(., cases_all_rel_ck = cases_all / population_total *100000) %>%
mutate(., cases_all_diff_rel_ck = cases_all_rel_ck - lag(cases_all_rel_ck)) %>%
ungroup(.) %>%
group_by(., status, country_region) %>%
mutate(., cases_all_rollmean = zoo::rollmean(cases_all, k = 7, fill = NA, align = "right")) %>%
mutate(., cases_all_diff_rollmean = zoo::rollmean(cases_all_diff, k = 7, fill = NA, align = "right")) %>%
ungroup(.)
# dd_countries_notjoined_dd <- unique(as.character(dd$country_region)[as.character(dd$country_region) %in% dd_pop$country == FALSE])
# dd_countries_notjoined_dd_pop <- unique(as.character(filter(dd_pop, region != "Aggregates")$country)[as.character(filter(dd_pop, region != "Aggregate")$country) %in% dd$country_region == FALSE])
# Define visual parameters, e.g. ggplot theme.
palettes <- list(
pal_01 = c("#262406", "#BAA135", "#CE9133", "#C95B26", "#C84A22"),
pal_02 = c("#E16C80", "#546B72", "#EBC553", "#D4BEA0", "#EEDDCB"),
pal_03 = c("#981F27", "#26343F", "#E27B30", "#E1662B", "#7E933B"),
pal_04 = c("#B8BFB6", "#627F33", "#FFC941", "#263140", "#E56032"),
pal_05 = c("#BF9648", "#7A787F", "#F9F9F9", "#3E4040", "#177CB5"),
pal_06 = c("#5A6D70", "#26291F", "#A4A8A7", "#BD5152", "#918F75"),
pal_07 = c("#ECD074", "#595652", "#848A91", "#B0AFAB", "#82412F"),
pal_08 = c("#DE314A", "#C72B54", "#D7CDC1", "#CE8F54", "#CD837A"),
pal_09 = c("#C84A4F", "#801921", "#C72B34", "#CF983A", "#E5C547"))
palettes_long <- list(
pals_01 = c("#262406", "#BAA135", "#CE9133", "#C95B26", "#C84A22", "#E16C80", "#546B72", "#EBC553", "#D4BEA0", "#EEDDCB"),
pals_02 = c("#981F27", "#26343F", "#E27B30", "#E1662B", "#7E933B", "#B8BFB6", "#627F33", "#FFC941", "#263140", "#E56032"),
pals_03 = c("#BF9648", "#7A787F", "#F9F9F9", "#3E4040", "#177CB5", "#5A6D70", "#26291F", "#A4A8A7", "#BD5152", "#918F75"),
pals_04 = c("#ECD074", "#595652", "#848A91", "#B0AFAB", "#82412F", "#DE314A", "#C72B54", "#D7CDC1", "#CE8F54", "#CD837A"))
cols_background_dark  <- c("#D7D8D8", "#7B8381", "#585550", "#", "#", "#", "#", "#", "#", "#", "#", "#")
cols_background_light <- c("#D8D6D1", "#F1EAE0", "#D7CDC1", "#D8D4CD", "#", "#", "#", "#", "#", "#", "#", "#")
col_background <- cols_background_light[4]
col_grid_ticks <- cols_background_light[3]
theme_TMM_01 <- function() {
theme(
# axis.text = element_text(family = "Varela Round"),
# text = element_text(family = "Montserrat-Light"),
# text = element_text(family = "Lato"),
text = element_text(family = "SF Pro Rounded"),
# axis.text.x = element_text(size = 9, colour = "#7F8182", face = "plain", vjust = 1),
axis.text.x = element_text(size = 9, colour = "#7F8182", vjust = 1, face = "plain"),
axis.text.y = element_text(size = 9, colour = "#7F8182", vjust = 0.5, face = "plain"),
axis.ticks = element_line(colour = col_grid_ticks, size = 0.2),
axis.ticks.length = unit(3, "mm"),
axis.line = element_blank(),
plot.title = element_text(face = "plain", hjust = 0, vjust = -0, colour = "#3C3C3C", size = 30, margin=margin(10,0,8,)),
plot.subtitle = element_text(hjust = 0, vjust = -1, colour = "#3C3C3C", size = 12, margin=margin(0,0,30,0)),
plot.caption = element_text(size = 8, hjust = 0, vjust = -0.1, colour = "#7F8182"),
panel.background = element_rect(fill = col_background),
panel.border = element_blank(),
plot.background = element_rect(fill = col_background, colour = col_background),
panel.grid.major = element_line(colour = col_grid_ticks, size = 0.2),
panel.grid.minor = element_line(colour = col_grid_ticks, size = 0.2),
legend.title = element_blank(),
# legend.justification = c(0,0),
legend.position = "none",
# legend.position = c(0.0, 0.1),
legend.background = element_blank(),
legend.key = element_blank(),
legend.text = element_text(size = 8))
# complete = FALSE)
}
# Preserve sum of rounded proprtions:
# (According to https://www.r-bloggers.com/round-values-while-preserve-their-rounded-sum-in-r/)
round_preserve <- function(x, digits = 0) {
up <-  10 ^ digits
x <-  x * up
y <-  floor(x)
indices <-  tail(order(x-y), round(sum(x)) - sum(y))
y[indices] <-  y[indices] + 1
y / up
}
# Function to generate the data frame used for waffle chart (for country)
f_waffle_country <- function(c, d) {
dd_waffle_country <- dd_plus %>%
filter(., country_region %in% c & date == d) %>%
mutate(., status = fct_relevel(status, "confirmed", "active", "recovered", "deaths")) %>%
filter(., status != "confirmed") %>%
group_by(., country_region) %>%
mutate(., cases = round_preserve(cases_all/sum(cases_all)*100),
image = list(img)) %>%
ungroup(.)
}
tail(filter(dd_plus, country_region == "Sweden"), 10)
dd_plius_SE <- filter(dd_plus, country_region == 2SWEDEN)
dd_plius_SE <- filter(dd_plus, country_region == "Sewden")
View(dd_plius_SE)
dd_plus_SE <- filter(dd_plus, country_region == "Sweden")
View(dd_plus_SE)
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
dd_cut_crit_SE <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= 0) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
View(dd_cut_crit_SE)
dd_cut_crit_SE <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= 50) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
dd_cut_crit_SE <- dd_plus %>%
group_by(., country_region, status) %>%
filter(., cases_all >= 0) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
dd_cut_crit_SE <- dd_plus %>%
group_by(., status) %>%
filter(., cases_all >= 0) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
dd_cut_crit_SE <- dd_plus %>%
filter(., country_region == "Sweden") %>%
group_by(., status) %>%
filter(., cases_all >= 0) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
View(dd_cut_crit_SE)
dd_cut_crit_SE <- dd_plus %>%
filter(., country_region == "Sweden") %>%
group_by(., status) %>%
filter(., cases_all >= 50) %>%
mutate(., time_ind = as.numeric(difftime(date, min(date), units = "days"))) %>%
ungroup(.)
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
?date
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
?mtreact
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_Visuals')
data <- reactiveValues()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
?observeEvent
?reactiveValues
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
data[[1]]
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
lubridate::today()
environment()
print(environment())
# Linear plot of daily changes in chases.
p_selected_vs_all_diff_lin <- ggplot() +
geom_line(data = dd_base_viz,
aes(x = time_ind, y = cases_all_diff, group = as.factor(country_region),
colour = "#FFFFFF"),
alpha = 0.5,
size = 0.5) +
geom_line(data = filter(dd_base_viz, country_region %in% selected_country),
aes(x = time_ind, y = cases_all_diff, colour = status),
size = 1.0,
alpha = 0.9) +
geom_point(data = dd_base_viz_selected,
aes(x = time_ind, y = cases_all_diff, colour = status),
size = 1.4) +
geom_hline(data = dd_base_viz_selected,
aes(yintercept = dd_base_viz_selected$cases_all_diff, group = status),
size = 0.5,
linetype = "dashed",
colour = "#7F8182") +
geom_text(data = dd_base_viz_selected,
aes(x = time_ind, y = cases_all_diff,
label = paste(cases_all_diff, status, sep = "\n"),
colour = status,
fontface= 2),
vjust = unit(0.5, "mm"),
hjust = unit(-0.2, "mm"),
size = 3.0) +
# scale_y_log10() +
scale_colour_manual(values = c("#FFFFFF", "#D8A94F", "#4E4E4C", "#A44A51", "#6378AC")) +
facet_wrap(~ status, scales = "free") +
coord_cartesian(xlim = c(0, 160)) +
scale_y_continuous(labels = scales::comma_format(big.mark = "'",
decimal.mark = ".")) +
labs(x = "",
y = "",
title = paste("Case numbers for", selected_country),
subtitle = paste("Temporal course of case numbers when first time exceeded 20", " (", dd_base_viz_selected$date[1], ").", sep = ""),
caption = "Source: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU) & The World Bank") +
theme(strip.background = element_blank(),
strip.text = element_blank(),
panel.spacing = unit(1.5, "lines")) +
theme_TMM_base(); p_selected_vs_all_diff_lin
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
ff <- function(x) 2*x +10
ff
ff(2)
ff[1]
ff()
ff <- function() "Hello! What's up?"
ff
ff()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
str()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp()
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/COVID-19/R Shiny/CoViD-19_dashboard')
